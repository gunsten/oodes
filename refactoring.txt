BEROENDEN:

View (CarView och DrawPanel)

* Beror på spec. subklasser till Car (för att avgöra displaysätt för varje modell)
  * Bryter mot DIP, men går inte att lösa straight-forward med Interfaces.
    Bättre lösning för att avgöra displaysätt behövs.

* Has-A Car, bryter mot DIP och beroendet kan riktas mot Locatable
             bryter mot ISP, Car har funk. som DP ej behöver
* Beror på CarController (DIP, skapa Interface)

CarController
* Beror på flera modellklasser (High coupling)
  * Dessa klasser har funk. som CC ej behöver (ISP)
* Behöver endast relaya signaler till modellklasserna, och
* Trigga repaint() i Viewern
* Behandlar när bilarna ska vända, bryter mot SRP

Modell-klasserna
* High cohesion
* Inga yttre dependencies
---------------------------------------------------------------------------------------
ANSVARSOMRÅDEN:

Modell-klasserna

* Car är rätt stor, men
  * Gör en sak, representerar en bil och
  * Har en anledning att ändras, om vårt sätt att modellera bilar grundläggande ändras
  
CarController
* Bör endast skicka signaler till modellklasserna och View
* Hanterar nu:
  * Initialisering
  * Modell-logik (flytta ansvaret för bilars turn-at-edge)
  * Håller en lista på bilar i simulationen
  
DrawPanel
* Hanterar nu:
  * Ritar ut bilar
  * Associerar Car-objekt och displaysätt
  * Har lista på bilar i simulationen
  
* Borde endast rita ut bilar

---------------------------------------------------------------------------------------
ANTECKNINGAR:
View:s beroende av modellklasser

View behöver bara känna till (x,y) och en associerad jpg för varje Locatable-object

* Samt "bounds", som antingen kan definieras i modell-paketet eller vid init
* Kan alltså bero på en abstraktion av modellen, basically en lista av Locatable-obj
    och Locatable (usage, verkar rimligt)

Controllers beroende av modellklasser

Behöver endast kunna:
* Signalera en update i modellen (förflytta alla Car-objekt)
* Skicka vidare gas/brake/start/stop/lift/lower/turbo on/off till modellen

Med den 
